Aufgabe 21

a) 

1. #define TRUE 1

2. #define minimum (a, b) (((a) < (b)) ? (a) : (b))

3. #define flush_buffer() (getchar() != '\n')

4. #define tolower(x) ((x) + (32))

b)

1. gcc -E a.c -o b
2. Die Datei a.c wird durch als Objektcode ausgegeben, (in eine Objektdatei übersetzt), nachdem es durch den Präprozessor, Compiler und Assembler „gelaufen“ ist.
3. Man benötigt ein Programm mit einer main Funktion: gcc a.o b.o <main>.c

c)

1. static int x = 14;
2. int v[10];
3. int v[1] = 10;
4. 
int i;
	laenge = strlen(s[i]);
	for (i = 0; i < laenge; i++)
	{
		if (s[i] == 10)
 	return 1;
else 
continue;
	             return 0;
	 }
        
5.

laenge = strlen(s[i]);
if (laenge > 5)

6.

char s[2] = {A, B, C};
char s[0] = x;
char s[1] = y;
char s[2] = '\0';

7.

strcat (s[i], t[5])

8. Es gibt den Wert 1 aus.

9. Keine Ausgabe.

d)

1. 0
2. 1
3. 1
4. 0
5. 0
6. 1
7. 2

Aufgabe 22

a)

#include <stdio.h>
#include <limits.h>
#include <float.h>

int main(void)
{
	printf("\n%s\t%u\t%i\t%i","char", sizeof(char), CHAR_MIN, CHAR_MAX);
	
	printf("\nAnzahl Byte fuer char: %i", sizeof(char));
	printf("\nAnzahl Byte fuer short int: %i", sizeof(short int));
	printf("\nAnzahl Byte fuer int: %i", sizeof(int));
	printf("\nAnzahl Byte fuer long int: %i", sizeof(long int));
	printf("\nAnzahl Byte fuer float: %i", sizeof(float));
	printf("\nAnzahl Byte fuer double: %i", sizeof(double));
	printf("\nAnzahl Byte fuer den Ausdruck \"1 + 2\": %i", sizeof("1+2"));
	printf("\nAnzahl Byte fuer den Ausdruck \"1 + 2.0\": %i", sizeof("1 + 2.0"));
	
	printf("\nWertebereich fuer char: [%i, %i]", CHAR_MIN, CHAR_MAX);
	printf("\nWertebereich fuer short int: [%i, %i]", SHRT_MIN, SHRT_MAX);
	printf("\nWertebereich fuer int: [%i, %i]", INT_MIN, INT_MAX);
	printf("\nWertebereich fuer long int: [%li, %li]", LONG_MIN, LONG_MAX);
	printf("\nWertebereich fuer unsigned long int: [%lu, %lu]", 0, ULONG_MAX);
	printf("\nWertebereich fuer float: [%f, %f]", FLT_MIN, FLT_MAX);
	return 0;
}

b)

#include <stdio.h>
#include <time.h>
#include <stdlib.h>

int zufall();
int main(void)
{
	srand(time(0));
	printf("Muenzwurf: %i", zufall());
	return 0;
}

int zufall()
{
	int x;
	x = (rand() % 2);
	
	return x;
}

c)

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
int zufall();
int main(void)
{
	srand(time(0));
	printf("Wuerfelzahl: %i", zufall());
	return 0;
}

int zufall()
{
	int x;
	x = ((rand() % (7 -1)) + 1);
	
	return x;
}

d)

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void zufall(void);

int main(void)
{
	srand(time(NULL));
	zufall();
	return 0;
}

void zufall(void)
{
	int k;
	int i = 0;
	while(i != 1)
	{
		k = (rand() % 10000000);
	
		if(k < 123 && k > 96 || k < 58 && k > 47 || k < 91 && k > 64)
		{
			printf("%c", k);
			i = 1;
		}
	}
}


Aufgabe 23

#include <stdio.h>
#include <string.h>
#define MIN 3
#define MAX 21

int read_name(char input[]);

int main(void)
{
	char feld[20];
	int status;
	printf("\nGeben sie einen Satz ein: ");
	gets(feld);
	status = read_name(feld);
	if (status == 1)
		printf("Eingabe korrekt");
	else
		printf("Eingabe nicht korrekt");
	
	return 0;
}

int read_name(char input[])
{
	int i = 0;
	int laenge;
	
	laenge = strlen(input);
	
	if (input[0] < 65 || input[0] > 90)
			
			return 0;
		
	
	if (laenge < MIN || laenge > MAX)
			return 0;
	
	
	/*
	while (input[i] < laenge)
	{
		if (input[i+1] < 65 || (input[i+1] > 90 && input[i+1] < 97) || input[i+1] > 122)
		{
			return 0;
			break;
		}
		else
			i++;
	}	
	*/
	return 1;
}

Aufgabe 24
